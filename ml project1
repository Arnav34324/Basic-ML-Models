# Basic ML Models Project

## Introduction

This document contains the code for the Basic ML Models project. It includes a machine learning model to predict energy consumption, implemented using TensorFlow, and packaged with Docker for ease of deployment.

---

## Project Components

### 1. Dockerfile

```dockerfile
# Use the official lightweight Python image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt .

# Install the necessary packages
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code into the container
COPY . .

# Command to run the application
CMD ["python", "main.py"]
```

---

### 2. requirements.txt

```plaintext
pandas
numpy
scikit-learn
tensorflow
```

---

### 3. main.py (Machine Learning Model Implementation)

```python
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Example data generation
data = pd.DataFrame({
    'feature1': np.random.rand(100),
    'feature2': np.random.rand(100),
    'feature3': np.random.rand(100),
    'target': np.random.randint(0, 2, 100)
})

# Splitting the data into training and testing sets
X = data[['feature1', 'feature2', 'feature3']]
y = data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardizing the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Building a simple neural network model
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compiling the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training the model
model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Evaluating the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {accuracy:.4f}')
```

---

### 4. README.md

```markdown
# Energy Consumption Prediction

This project aims to predict the energy consumption of smart buildings using historical data. It utilizes a neural network model built with TensorFlow and is containerized using Docker for platform independence.

## Project Structure

- `Dockerfile`: Defines the Docker image for the project.
- `requirements.txt`: Lists the Python dependencies.
- `main.py`: Contains the ML model code.

## Instructions

1. **Build the Docker image**:
   ```sh
   docker build -t energy-consumption-prediction .
   ```
2. **Run the Docker container**:
   ```sh
   docker run -it --rm energy-consumption-prediction
   ```
3. The model will be trained and evaluated, and the test accuracy will be displayed.
```

---

## Conclusion

This document provides a structured representation of the Basic ML Models project. It ensures ease of execution and reproducibility for submission. The project is now ready for upload.

